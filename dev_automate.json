{
  "fqn": "dev_automate4",
  "name": "Dev-Automate",
  "deprecated": false,
  "image": null,
  "description": null,
  "descriptor": {
    "type": "static",
    "sizeX": 10,
    "sizeY": 6.5,
    "resources": [],
    "templateHtml": "<div class=\"Dev-Automate\" id=\"Dev-Automate-deviceList\">\n    <div class=\"my-header\">\n        \n       <h4 contenteditable=\"true\">Automate</h4>\n       <!--<span>-->\n       <!--     <button class=\"btn\" (click)=\"addDevice()\">+</button>-->\n       <!--     <button class=\"btn\" (click)=\"sendData()\">></button>-->\n       <!-- </span>-->\n\n    </div>\n</div>\n\n",
    "templateCss": ".my-header h4 { \n  display: inline;\n}\n.my-header span { \n  float: right;\n}\n.Dev-Automate {\n        background-color: #333;\n        color: #fff;\n        padding: 20px;\n        margin: 20px;\n        width: 300px;\n        border-radius: 10px;\n    }\n.switch {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n}\n.switch input[type=\"checkbox\"] {\n    width: 40px;\n    height: 20px;\n    margin-left: 10px;\n}\n.btn {\n    background-color: #555;\n    color: white;\n    border: none;\n    padding: 5px 10px;\n    cursor: pointer;\n    border-radius: 5px;\n}\n        \n.toggle-btn {\n    background-color: #555;\n    border: none;\n    color: white;\n    border-radius: 15px;\n    padding: 5px 15px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n    font-size: 14px;\n}\n\n.toggle-btn.off {\n    background-color: #555;\n}\n\n.toggle-btn:not(.off) {\n    background-color: #4caf50;\n}     ",
    "controllerScript": "self.onInit = function() {\n    var deviceList = document.getElementById('Dev-Automate-deviceList');\n    \n    // Ensure that the deviceList is defined\n    if (!deviceList) {\n        console.error('Device list element not found!');\n        return;\n    }\n\n    // Store device elements for accurate indexing\n    var deviceElements = [];\n\n    self.ctx.settings.Device.forEach((device, i) => {\n        // Create a new container for the device switch\n        var newDevice = document.createElement('div');\n        newDevice.className = 'switch';\n\n        var blockquote = document.createElement('BLOCKQUOTE');\n        blockquote.setAttribute(\"contenteditable\", \"true\");\n\n        var newLabel = document.createElement('label');\n        newLabel.textContent = device.name || 'New Device'; // Default to 'New Device' if name is not provided\n\n        var newSwitch = document.createElement('button');\n        newSwitch.className = 'toggle-btn off';\n        newSwitch.textContent = 'OFF';\n\n        // Add an event listener for the button to toggle ON/OFF\n        newSwitch.addEventListener('click', function() {\n            var index = deviceElements.indexOf(newDevice);\n            if (index === -1) return; // Exit if the device is not found\n\n            newSwitch.classList.toggle('off');\n            if (newSwitch.classList.contains('off')) {\n                newSwitch.textContent = 'OFF';\n                console.log('Device ' + (index + 1) + ' is OFF');\n                sendCmd(index, false);\n            } else {\n                newSwitch.textContent = 'ON';\n                console.log('Device ' + (index + 1) + ' is ON');\n                sendCmd(index, true);\n            }\n        });\n\n        var removeButton = document.createElement('button');\n        removeButton.className = 'btn';\n        removeButton.textContent = '-';\n        removeButton.onclick = function() {\n            removeDevice(newDevice);\n        };\n\n        blockquote.appendChild(newLabel);\n        newDevice.appendChild(blockquote);\n        newDevice.appendChild(newSwitch);\n        newDevice.appendChild(removeButton);\n\n        deviceList.appendChild(newDevice);\n        deviceElements.push(newDevice);\n    });\n\n   // Example sendCmd function\n    function sendCmd(index, setData) {\n        const $injector = self.ctx.$scope.$injector;\n        const deviceService = $injector.get(self.ctx.servicesMap.get('deviceService'));\n        \n        var deviceId = self.ctx.settings.Device[index].Device;\n        var rpcMethod = self.ctx.settings.Device[index].method;\n        var rpcParams = JSON.parse(setData ? self.ctx.settings.Device[index].valuesOn : self.ctx.settings.Device[index].valuesOff);\n        \n        const requestBody = {\n          method: rpcMethod,\n          params: rpcParams\n        };\n        deviceService.sendOneWayRpcCommand(deviceId, requestBody).subscribe(\n          () => {\n            console.log('RPC Command sent successfully');\n          }\n        );\n        console.log('Sending command to device at index:', index);\n    }\n    \n    \n    // Updated removeDevice function to maintain correct indexing\n    function removeDevice(deviceElement) {\n        if (deviceElement && deviceList) {\n            var index = deviceElements.indexOf(deviceElement);\n            if (index > -1) {\n                deviceElements.splice(index, 1); // Remove the device from the array\n                deviceList.removeChild(deviceElement);\n            }\n        }\n    }\n};\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: true,\n        horizontal: true,\n        previewWidth: '420px',\n        previewHeight: '90px',\n        embedTitlePanel: true,\n    };\n};\n\nself.onDestroy = function() {\n    // Cleanup code if necessary\n    // For example, remove event listeners or disconnect from services.\n};",
    "settingsSchema": "{\n      \"schema\": {\n      \"type\": \"object\",\n      \"title\": \"Settings\",\n      \"required\": [\n        \"Device\"\n      ],\n      \"properties\": {\n        \"Device\": {\n          \"type\": \"array\",\n          \"title\": \"Device\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"title\": \"name\",\n                \"type\": \"string\"\n              },\n              \"Device\": {\n                \"title\": \"Device\",\n                \"type\": \"string\"\n              },\n              \"method\": {\n                \"title\": \"method\",\n                \"type\": \"string\"\n              },\n              \"valuesOn\": {\n                \"title\": \"valuesOn\",\n                \"type\": \"string\"\n              }, \n              \"valuesOff\": {\n                \"title\": \"valuesOff\",\n                \"type\": \"string\"\n              }  \n            },\n            \"required\": [\n              \"Device\"\n            ]\n          }\n        }\n      }\n    }\n}\n\n   \n   \n   ",
    "dataKeySettingsSchema": "",
    "settingsDirective": "",
    "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"Device\":[{\"Device\":\"8b08cb90-8a9e-11ef-a286-57900486f17f\",\"method\":\"set\",\"values\":\"test\",\"name\":\"Hue Play 2\",\"valuesOff\":\"{\\\"values\\\": {\\\"on\\\":false}}\",\"valuesOn\":\"{\\\"values\\\": {\\\"on\\\": true}}\"},{\"Device\":\"8b06f6d0-8a9e-11ef-a286-57900486f17f\",\"method\":\"set\",\"values\":\"test \",\"name\":\"Hue Play 1\",\"valuesOn\":\"{\\\"values\\\":{\\\"on\\\":true}}\",\"valuesOff\":\"{\\\"values\\\": {\\\"on\\\":false}}\"}]},\"title\":\"Dev-Automate\",\"dropShadow\":true}"
  },
  "scada": false,
  "tags": null
}