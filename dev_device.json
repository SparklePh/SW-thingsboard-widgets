{
  "fqn": "dev_automate_js_8",
  "name": "Dev-Device",
  "deprecated": false,
  "image": null,
  "description": null,
  "descriptor": {
    "type": "static",
    "sizeX": 9.5,
    "sizeY": 9,
    "resources": [],
    "templateHtml": "<div class=\"Dev-Automate\" id=\"deviceList\">\n    <div class=\"my-header\">\n        \n       <h4>Device</h4>\n       <!--<span>-->\n       <!--     <button class=\"btn\" (click)=\"addDevice()\">+</button>-->\n       <!--     <button class=\"btn\" (click)=\"sendCommandNew()\">></button>-->\n       <!-- </span>-->\n\n    </div>\n    <!--<div class=\"checkbox-container\">-->\n    <!--    <input type=\"checkbox\" name=\"on-off-switch\" id=\"on-off-switch\" checked=\"\">-->\n    <!--</div>-->\n</div>\n\n\n\n\n\n\n\n\n",
    "templateCss": ".my-header h4 { \n  display: inline;\n}\n.my-header span { \n  float: right;\n}\n.Dev-Automate {\n        background-color: #333;\n        color: #fff;\n        padding: 20px;\n        margin: 20px;\n        width: 300px;\n        border-radius: 10px;\n    }\n.switch {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n}\n.switch input[type=\"checkbox\"] {\n    width: 40px;\n    height: 20px;\n    margin-left: 10px;\n}\n.btn {\n    background-color: #555;\n    color: white;\n    border: none;\n    padding: 5px 10px;\n    cursor: pointer;\n    border-radius: 5px;\n}\n        \n.toggle-btn {\n    background-color: #555;\n    border: none;\n    color: white;\n    border-radius: 15px;\n    padding: 5px 15px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n    font-size: 14px;\n}\n\n.toggle-btn.off {\n    background-color: #555;\n}\n\n.toggle-btn:not(.off) {\n    background-color: #4caf50;\n}     \n\n\n.switch-slider {\n  position: relative;\n  display: inline-block;\n  width: 40px;\n  height: 20px;\n}\n\n.switch-slider input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.4s;\n  border-radius: 20px;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 16px;\n  width: 16px;\n  left: 2px;\n  bottom: 2px;\n  background-color: white;\n  transition: 0.4s;\n  border-radius: 50%;\n}\n\ninput:checked + .slider {\n    background-color: #36C058;\n;\n}\n\ninput:checked + .slider:before {\n  transform: translateX(20px);\n}",
    "controllerScript": "self.onInit = function() {\n    var deviceList = document.getElementById('deviceList');\n    \n    // Ensure that deviceList is defined\n    if (!deviceList) {\n        console.error('Device list element not found!');\n        return;\n    }\n\n    for (let i = 0; i < self.ctx.settings.Device.length; i++) { \n        var device = self.ctx.settings.Device[i];\n        \n        var status = self.ctx.settings.Device[i].setupMethod;\n        \n        var newDevice = document.createElement('div');\n        newDevice.className = 'switch';\n        \n        var blockquote = document.createElement('BLOCKQUOTE');\n        blockquote.setAttribute(\"contenteditable\", \"true\");\n        \n        var newLabel = document.createElement('label');\n        newLabel.textContent = device.name;\n        \n        // Create a slider switch\n        var newSwitchContainer = document.createElement('label');\n        newSwitchContainer.className = 'switch-slider';\n        \n        var newSwitch = document.createElement('input');\n        newSwitch.type = 'checkbox';\n        \n        if (status == 'ON') {\n         newSwitch.checked= 'on';\n        }\n       \n        sendCmd(i, status);\n\n        \n        var sliderSpan = document.createElement('span');\n        sliderSpan.className = 'slider';\n        \n        newSwitchContainer.appendChild(newSwitch);\n        newSwitchContainer.appendChild(sliderSpan);\n        \n        // Add an event listener for the checkbox to log ON/OFF\n        newSwitch.addEventListener('change', handleSwitchChange(i)); // Use the function that returns an event handler\n        \n        var removeButton = document.createElement('button');\n        removeButton.className = 'btn';\n        removeButton.textContent = '-';\n        removeButton.onclick = function() {\n            removeDevice(newDevice);\n        };\n        \n        blockquote.appendChild(newLabel);\n        newDevice.appendChild(blockquote);\n        \n        newDevice.appendChild(newSwitchContainer);\n        newDevice.appendChild(removeButton);\n        \n        deviceList.appendChild(newDevice);\n        \n      \n    }\n\n    // Function to create an event handler closing over 'index'\n    function handleSwitchChange(index) {\n        return function() {\n            var setData = this.checked;\n            console.log('Device ' + (index + 1) + ' is ' + (setData ? 'ON' : 'OFF'));\n            sendCmd(index, setData);\n        };\n    }\n    \n    // Example sendCmd function\n    function sendCmd(index, setData) {\n        const $injector = self.ctx.$scope.$injector;\n        const deviceService = $injector.get(self.ctx.servicesMap.get('deviceService'));\n        \n        var deviceId = self.ctx.settings.Device[index].Device;\n        var rpcMethod = self.ctx.settings.Device[index].method;\n        var rpcParams = JSON.parse(setData ? self.ctx.settings.Device[index].valuesOn : self.ctx.settings.Device[index].valuesOff);\n        \n        const requestBody = {\n          method: rpcMethod,\n          params: rpcParams\n        };\n        // deviceService.sendOneWayRpcCommand(deviceId, requestBody).subscribe(\n        //   () => {\n        //     console.log('RPC Command sent successfully');\n        //   }\n        // );\n        \n        deviceService.sendTwoWayRpcCommand(deviceId, requestBody).subscribe(\n          (response) => {\n            console.log('RPC Response:', response);\n          }\n        );\n        \n        console.log('Sending command to device at index:', index);\n    }\n    \n    // Example removeDevice function\n    function removeDevice(deviceElement) {\n        if (deviceElement && deviceList) {\n            deviceList.removeChild(deviceElement);\n        }\n    }\n};\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: true,\n        horizontal: true,\n        previewWidth: '420px',\n        previewHeight: '90px',\n        embedTitlePanel: true,\n    };\n};",
    "settingsSchema": "{\n      \"schema\": {\n      \"type\": \"object\",\n      \"title\": \"Settings\",\n      \"required\": [\n        \"Device\"\n      ],\n      \"properties\": {\n        \"Device\": {\n          \"type\": \"array\",\n          \"title\": \"Device\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"title\": \"name\",\n                \"type\": \"string\"\n              },\n              \"Device\": {\n                \"title\": \"Device\",\n                \"type\": \"string\"\n              },\n              \"setupMethod\": {\n                \"title\": \"setupMethod\",\n                \"type\": \"string\"\n              },\n              \"method\": {\n                \"title\": \"method\",\n                \"type\": \"string\"\n              },\n              \"valuesOn\": {\n                \"title\": \"valuesOn\",\n                \"type\": \"string\"\n              }, \n              \"valuesOff\": {\n                \"title\": \"valuesOff\",\n                \"type\": \"string\"\n              }  \n            },\n            \"required\": [\n              \"Device\"\n            ]\n          }\n        }\n      }\n    }\n}\n\n   \n   \n   ",
    "dataKeySettingsSchema": "",
    "settingsDirective": "",
    "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"Device\":[{\"Device\":\"8b08cb90-8a9e-11ef-a286-57900486f17f\",\"params\":\"test\",\"values\":\"{\\\"values\\\":{\\\"on\\\":true}}\",\"method\":\"set\",\"valuesOn\":\"{\\\"values\\\": {\\\"on\\\": true}}\",\"valuesOff\":\"{\\\"values\\\": {\\\"on\\\":false}}\",\"name\":\"Hue Play 2\",\"setupMethod\":\"OFF\"},{\"name\":\"Hue Play 1\",\"Device\":\"8b06f6d0-8a9e-11ef-a286-57900486f17f\",\"method\":\"set\",\"valuesOn\":\"{\\\"values\\\":{\\\"on\\\":true}}\",\"valuesOff\":\"{\\\"values\\\": {\\\"on\\\":false}}\",\"setupMethod\":\"ON\"}]},\"title\":\"Dev-Automate-js-8\",\"datasources\":[],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
  },
  "scada": false,
  "tags": null
}